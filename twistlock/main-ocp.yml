##########     Maintener -> Altuğ Yıldırım              ####################
##########     PCC Defender Deployment Automation       ####################
##########     Prereqs -> ansible-galaxy collection install community.kubernetes   ##############
---
- name: Configure OpenShift and Twistlock settings
  hosts: localhost
  gather_facts: false
  vars:
    openshift_clusters:
      ocp_cluster1:
        api_endpoint: https://api.quasysdev.quasys.com.tr:6443
        sa_token: "{{ lookup('ansible.builtin.env', 'OCP_SA') }}"
      ocp_cluster2:
        api_endpoint: https://api.quasysdev.quasys.com.tr:6443
        sa_token: "{{ lookup('ansible.builtin.env', 'OCP_SA') }}"
    twistlock:
      username: "{{ lookup('ansible.builtin.env', 'TWISTLOCK_USERNAME') }}"
      password: "{{ lookup('ansible.builtin.env', 'TWISTLOCK_PASSWORD') }}"
#    oc_username: "twistlock" #sabit mi, sorulmalı
#    oc_password: "twistlock" #sabit mi, sorulmalı
    twistlock_console: "ec2-34-203-144-89.compute-1.amazonaws.com:8083" #sabit
    twistlock_defender: "ec2-34-203-144-89.compute-1.amazonaws.com:8084" #sabit
    apiversion: "v1" #sabit
    namespace: "test-qua-twistlock"  # sabit
    defender_version: "32"  # Define your defender version
    repo: jfrog.xyz/defender

  tasks:
#    - name: Read oc_server from file and set as list
#      set_fact:
#        oc_servers: "{{ lookup('file', 'oc_server.txt').splitlines() }}"

#    - name: Loop through each oc_server
#      debug:
#        msg: "Processing oc_server: {{ item }}"
#      with_items: "{{ oc_servers }}"

#Debug survey var

    - name: Debug survey variable
      ansible.builtin.debug:
        var: openshift_clusters[item]
      loop: "{{ survey_clusters }}"

#    - name: fail
#      ansible.builtin.fail:
#        msg: fail for test

    - name: Block for twistlock install
      block:
        - name: Set facts for each oc_server
          set_fact:
    #        current_oc_server: "{{ item }}"
            cluster_name: "{{ survey_clusters[item].api_endpoint.split('.')[1] }}"
    #      with_items: "{{ oc_servers }}"
    #      register: server_facts
    
        - name: Defenders - Deploy - DaemonSet - Get Defender yaml
          uri:
            url: https://{{ twistlock_console }}/api/{{ apiversion }}/defenders/daemonset.yaml
            method: POST
            body: {
                    "consoleAddr": "{{ twistlock_defender }}",
                    "cluster": "{{ cluster_name }}",
                    "namespace": "{{ namespace }}",
                    "orchestration": "openshift",
                    "containerRuntime": "crio",
                    "privileged": false,
                    "serviceaccounts": true,
                    "istio": false,
                    "collectPodLabels": true,
                    "memoryLimit": 2000,
                    "cpuLimit": 1500,
                    #"image": "{{ repo }}:{{ defender_version }}",
                    "selinux": true
                    }
            user: "{{ twistlock.username }}"
            password: "{{ twistlock.password }}"
            dest: defender-ds.yaml
            mode: 0755
            force_basic_auth: yes
            validate_certs: no
            body_format: json
            status_code: 200
          register: result
          until: result.status == 200
          retries: 1
          delay: 10
          delegate_to: localhost
    
        - name: Install Defender daemonset YAML
          redhat.openshift.k8s:
            state: present
            src: defender-ds.yaml
            api_key: "{{ openshift_clusters[item].sa_token }}"
            host: "{{ survey_clusters[item].api_endpoint }}"
          register: result
          delegate_to: localhost
    
        - name: Display deployment result
          debug:
            msg: "Defender DaemonSet deployment result: {{ result }}"
      loop: "{{ survey_clusters }}"
